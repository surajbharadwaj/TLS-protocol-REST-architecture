package mobile.computing.ws1819;



public class Tls {

	/*
	 * To indicate the name of handshake message
	 * Type: string
	 */
	private String handshakeProtocol;
	
	/*
	 * To indicate the value of the handshake protocol
	 * Type: integer
	 */
	private int handshakeType;
	
	/*
	 * To indicate the version of TLS protocol
	 * Type: integer array
	 */
	private int[] version;
	
	/*
	 * To indicate session
	 * Type: integer
	 */
	private int sessionId;
	
	/*
	 * To store the random number generated by client or server
	 * Type: String
	 */
	private String Random;
	
	/*
	 * To store the cipher suite which will be used in algorithm 
	 * Type: integer array
	 */
	private int[] cipherSuite;
	
	/*
	 * To store the compressionMethod which will be used in algorithm 
	 * Type: integer array
	 */
	private int[] compressionMethod;
	
	/*
	 * To store the encoded Hello message content for md5 and SHA update which will be required for verification at the end of finished message
	 * Type: string
	 */
	private String encoded;
	
	/*
	 * To set the HandshakeProtocol attribute
	 * @param: string
	 * @return: void
	 */
	private void setHandshakeProtocol(String HP)
	{
		this.handshakeProtocol = HP;
	}
	
	/*
	 * To set the handshakeType attribute
	 * @param: string
	 * @return: void
	 */
	private void setHandshakeType(int HT)
	{
		this.handshakeType = HT;
	}
	
	/*
	 * To set the Tls Version attribute
	 * @param: integer array
	 * @return: void
	 */
	private void setVersion(int[] Ver)
	{
		this.version = Ver;
	}
	
	/*
	 * To set the sessionid attribute
	 * @param: integer 
	 * @return: void
	 */
	private void setSessionId(int Sessionid)
	{
		this.sessionId = Sessionid;
	}
	
	/*
	 * To set the random attribute
	 * @param: string
	 * @return: void
	 */
	private void setRandom(String  R)
	{
		this.Random = R;
	}
	
	/*
	 * To set the CipherSuite attribute
	 * @param: integer array
	 * @return: void
	 */
	private void setCipherSuite(int[] CS)
	{
		this.cipherSuite = CS;
	}
	
	/*
	 * To set the CompressionMethod attribute
	 * @param: integer array
	 * @return: void
	 */
	private void setCompressionMethod(int[] CM)
	{
		this.compressionMethod = CM;
	}
	
	/*
	 * To set the Encoded attribute
	 * @param: string
	 * @return: void
	 */
	private void setEncoded(String E) {
     this.encoded=E;
		
	}
	
	/*
	 * To get the HandshakeProtocol attribute
	 * @param: 
	 * @return: string
	 */
	public String getHandshakeProtocol()
	{
		return handshakeProtocol;
	}
	
	/*
	 * To get the HandshakeType attribute
	 * @param: 
	 * @return: integer
	 */
	public int getHandshakeType()
	{
		return handshakeType;
	}
	
	/*
	 * To get the Version attribute
	 * @param: 
	 * @return: integer array
	 */
	public int[] getVersion()
	{
		return version;
	}

	/*
	 * To get the SessionId attribute
	 * @param: 
	 * @return: Integer
	 */
	public int getSessionId()
	{
		return sessionId ;
	}
	
	/*
	 * To get the Random attribute
	 * @param: 
	 * @return: String
	 */
	public String  getRandom()
	{
		return Random;
	}
	
	/*
	 * To get the CipherSuite attribute
	 * @param: 
	 * @return: Integer array
	 */
	public int[] getCipherSuite()
	{
	    return cipherSuite;
	}
	
	/*
	 * To get the CompressionMethod attribute
	 * @param: 
	 * @return: Integer array
	 */
	public int[] getCompressionMethod()
	{
		return compressionMethod;
	}
	
	/*
	 * To get the Encoded attribute
	 * @param: 
	 * @return: string
	 */
	public String getEncoded()
	{
		return encoded;
	}

	/*
	 * To create a new object of class Tls
	 * @param: string, integer, integer array, integer, string, integer array, integer array, string
	 * @return: Tls
	 */
	public static Tls Hello(String HP, int HT, int[] Ver, int SessionId,String rand,int[] CS,int[] CM,String E)
	{
		Tls tls = new Tls();
		
		tls.setHandshakeProtocol(HP);
		tls.setHandshakeType(HT);
		tls.setVersion(Ver);
		tls.setSessionId(SessionId);
		tls.setRandom(rand);
		tls.setCipherSuite(CS);
		tls.setCompressionMethod(CM);
		tls.setEncoded(E);
		return tls;
	}

	

	
}

